// Generated by ts-to-zod
import { z } from "zod";
import { Json } from "./database.types";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable()
);

export const stepRunsRowSchema = z.object({
  created_at: z.string(),
  id: z.number(),
  input: jsonSchema.nullable(),
  output: jsonSchema.nullable(),
  status: z.string().nullable(),
  step_id: z.number(),
  workflow_id: z.number().nullable(),
});

export const stepRunsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  input: jsonSchema.optional().nullable(),
  output: jsonSchema.optional().nullable(),
  status: z.string().optional().nullable(),
  step_id: z.number(),
  workflow_id: z.number().optional().nullable(),
});

export const stepRunsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  input: jsonSchema.optional().nullable(),
  output: jsonSchema.optional().nullable(),
  status: z.string().optional().nullable(),
  step_id: z.number().optional(),
  workflow_id: z.number().optional().nullable(),
});

export const stepsRowSchema = z.object({
  action: jsonSchema,
  created_at: z.string(),
  id: z.number(),
  order: z.number(),
  tx_sign_data: jsonSchema.nullable(),
  type: z.string(),
  workflow_id: z.number(),
});

export const stepsInsertSchema = z.object({
  action: jsonSchema,
  created_at: z.string().optional(),
  id: z.number().optional(),
  order: z.number(),
  tx_sign_data: jsonSchema.optional().nullable(),
  type: z.string(),
  workflow_id: z.number(),
});

export const stepsUpdateSchema = z.object({
  action: jsonSchema.optional(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  order: z.number().optional(),
  tx_sign_data: jsonSchema.optional().nullable(),
  type: z.string().optional(),
  workflow_id: z.number().optional(),
});

export const workflowsRowSchema = z.object({
  address: z.string(),
  chain_id: z.number(),
  created_at: z.string(),
  id: z.number(),
  name: z.string(),
  trigger: jsonSchema,
});

export const workflowsInsertSchema = z.object({
  address: z.string(),
  chain_id: z.number(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  name: z.string(),
  trigger: jsonSchema,
});

export const workflowsUpdateSchema = z.object({
  address: z.string().optional(),
  chain_id: z.number().optional(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  name: z.string().optional(),
  trigger: jsonSchema.optional(),
});
